url
help("url")
args("url")
help.search("url")
install.packages(c("boot", "class", "cluster", "codetools", "foreign", "KernSmooth", "lattice", "manipulate", "MASS", "Matrix", "mgcv", "nlme", "nnet", "rpart", "spatial", "survival"))
install.packages("RPostgresql")
install.packages("rpostgresql")
install.packages("KernSmooth")
KernSmooth()
library(KernSmooth)
library(swirl)
library("swirl")
install.packages("swirl")
library(swirl)
swirl()
library(swirl)
swirl()
sapply(flags, unique)
vapply(flags, unique, numeric(1))
ok()
sapply(flags, class)
vapply(flags, class, character(1))
?tapply
table(flags$landmass)
View(flags)
table(flags$animate)
tapply(flags$animate, flags$landmass, mean)
tapply(flags$population, flags$red, summary)
tapply(flags$population, flags$landmasses, summary)
tapply(flags$population, flags$landmass, summary)
ls()
class(plants)
dim(plants)
nrow(plants)
ncol(plants)
object.size(plants)
object.size(plants) / 1024
names(plants)
head(plants)
head(plants, n = 10)
tail(plants, n = 15)
summary(plants)
table(plants$Active_Growth_Period)
str(plants)
?sample
sample(1:6, 4, replace = TRUE)
sample(1:6, 4, replace = TRUE)
sample(1:20)
sample(1:20, 10)
LETTERS
sample(LETTERS)
flips <- sample(c(0,1), 100)
flips <- sample(c(0,1), 100, replace = TRUE)
flips <- sample(c(0,1), 100, replace = TRUE, prob = c(0.3, 0.7))
flips
sum(flips)
?rbinom
rbinom(1, size = 100, prob = 0.7)
flips2 <- rbinom(1, size = 100, prob = 0.7)
flips2 <- rbinom(size = 1, n = 100, prob = 0.7)
flips2
sum(flips2)
?rnorm
rnorm(10)
rnorm(n = 10, mean = 100, sd = 25)
?rpois
rpois(n = 5, lambda = 10)
my_pois <- replicate(100, rpois(5, 10))
my_pois
cm <- colMeans(my_pois)
hist(cm)
d1 <- Sys.Date()
class(d1)
unclass(d1)
d1
d2 <- as.Date("1969-01-01")
unclass(d2)
Sys.time()
t1 <- Sys.time()
t1
class(t1)
unclass(t1)
t2 <- as.POSIXlt(Sys.time())
t2
class(t2)
t2
unclass(t2)
str(unclass(t2))
t2$min
weekdays(d1)
months(t1)
quarters(t2)
t3 <- "October 17, 1986 08:24"
t4 <- strptime(t3, "%B %d, %Y %H:%M")
t4
class(t4)
Sys.time() > t1
Sys.time() - t1
difftime(Sys.time(), t1, units = 'days')
data(cars)
?cars
head(cars)
plot(cars)
?plot
plot(x = cars$speed, y = cars$dist)
plot(x = cars$dist, y = cars$speed)
plot(x = cars$speed, y = cars$dist)
plot(x = cars$speed, y = cars$dist, xlab = "Speed")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", y = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance", main = "My Plot")
plot(cars, main = "My Plot")
plot(cars, main = "My Plot", sub = "My Plot Subtitle")
plot(cars, sub = "My Plot Subtitle")
?par
plot(cars, col = 2)
plot(cars, xlim = c(10, 15))
plot(cars, pch = 2)
load(mtcars)
data(mtcars)
?boxplot()
?boxplot
boxplot(mtcars, formula = mpg ~ cyl)
boxplot(formula = mpg ~ cyl, data = mtcars)
hist(mtcars$mpg)
exit()
bye()
library(httr)
?oauth1.0_token
?oauth_app
?sign_oauth
?sign_oauth1.0
jsonlite::fromJSON(toJSON(json))
library(jsonlite)
jsonlite::fromJSON(toJSON(json))
load(foreign)
library(foreign)
?jped
?jpeg
R.version.string
q()
rm(list=ls()
)
library(reshape2)
head(mtcars)
rownames(mtcars)
mtcars
?melt
mtcars$carname <- rownames(mtcars)
View(mtcars)
cartMelt <- melt(mtcars, id=c("carname","cyl","gear"), measure.vars = c("hp","mpg"))
View(cartMelt)
?dcast
cyldata <- dcast(cartMelt, cyl ~ variable)
View(cyldata)
cyldata <- dcast(cartMelt, cyl ~ variable, formula = sum(variable))
cyldata <- dcast(cartMelt, cyl ~ variable, sum)
cyldata
cyldata <- dcast(cartMelt, cyl ~ variable, mean)
cyldata
cyldata <- dcast(cartMelt, cyl ~ variable, length)
InsectSprays
tapply(InsectsSpray$count, InsectsSpray$spray, sum)
tapply(InsectSprays$count, InsectSprays$spray, sum)
mtcars
?ddply
?ddply
library(plyr)
?ddply
ddply(InsectSprays, .(spray), summarize, sum=sum(count))
ddply(InsectSprays, .(spray), summarize, total=sum(count))
library(dplyr)
install.packages(dplyr)
install.packages("dplyr")
install.packages("dplyr")
setwd("Google Drive/git/tidydata/")
source("run_analysis.R")
